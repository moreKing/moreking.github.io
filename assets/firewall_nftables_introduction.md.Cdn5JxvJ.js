import{_ as a,c as t,ai as d,G as c,B as l,o as i}from"./chunks/framework.DcWFUpHS.js";const h=JSON.parse('{"title":"简要说明","description":"","frontmatter":{},"headers":[],"relativePath":"firewall/nftables/introduction.md","filePath":"firewall/nftables/introduction.md","lastUpdated":1737611111000}'),n={name:"firewall/nftables/introduction.md"};function s(r,e,p,b,f,_){const o=l("MyImg");return i(),t("div",null,[e[0]||(e[0]=d('<h1 id="简要说明" tabindex="-1">简要说明 <a class="header-anchor" href="#简要说明" aria-label="Permalink to &quot;简要说明&quot;">​</a></h1><p><code>nftables</code> 是新式的数据包过滤框架，从 Linux 内核 3.13 版本开始可用，旨在替代现用的 <code>iptables</code> 框架。</p><p>目前最新的红帽、Ubuntu等主流系统均已用 <code>nftables</code>替代了<code>iptables</code></p><p>本文档适用于从零开始的小白</p><h3 id="为什么要采用新框架" tabindex="-1">为什么要采用新框架？ <a class="header-anchor" href="#为什么要采用新框架" aria-label="Permalink to &quot;为什么要采用新框架？&quot;">​</a></h3><p><code>iptables</code>有几个难以解决的问题，涉及可扩展性、性能、代码维护等。</p><h3 id="主要区别是什么" tabindex="-1">主要区别是什么？ <a class="header-anchor" href="#主要区别是什么" aria-label="Permalink to &quot;主要区别是什么？&quot;">​</a></h3><ol><li>在 <code>iptables</code>中，默认情况下有几个表（filter、nat）和链（FORWARD、INPUT.....).在 <code>nftables</code>中，没有默认的表/链。</li><li>在 <code>iptables</code>中，每个规则只有一个目标（-j ACCEPT、-j LOG ..) 在 <code>nftables</code>中，您可以在一个规则中执行多个操作。</li><li><code>nftables</code>包括内置的数据集功能。在 <code>iptables</code>中，需要使用单独的工具<code>ipset</code>。</li><li>在 <code>iptables</code> 框架中，每个系列都有工具：<code>iptables</code>、<code>ip6tables</code>、<code>arptables</code>、<code>ebtables</code>。现在，<code>nftables</code> 允许您在一个<code> CLI</code> 工具中管理所有族。</li><li><code>nftables</code> 有一个新的“简化的双栈<code> IPv4/IPv6</code> 管理，通过新的 <code>inet</code> 系列，允许您注册同时看到 IPv4 和 IPv6 流量的基础链”。</li><li>这个新框架具有一个新的<code> linux</code> 内核子系统，称为<code> nf_tables</code>。新的引擎机制受到类<code>BPF</code>系统的启发，具有一组基本表达式，可以将它们组合起来构建复杂的过滤规则。</li></ol>',8)),c(o,{url:"/firewall/nf-hooks.png"})])}const m=a(n,[["render",s]]);export{h as __pageData,m as default};
