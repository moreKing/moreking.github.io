import{_ as n,c as e,ai as i,G as l,B as p,o as t}from"./chunks/framework.DcWFUpHS.js";const u=JSON.parse('{"title":"认识镜像","description":"","frontmatter":{},"headers":[],"relativePath":"docker/docker/01.md","filePath":"docker/docker/01.md","lastUpdated":1737611111000}'),h={name:"docker/docker/01.md"};function k(r,s,o,d,c,F){const a=p("MyImg");return t(),e("div",null,[s[0]||(s[0]=i('<h1 id="认识镜像" tabindex="-1">认识镜像 <a class="header-anchor" href="#认识镜像" aria-label="Permalink to &quot;认识镜像&quot;">​</a></h1><p>镜像：是一种轻量级、可执行的独立软件包，它包含运行某个软件所需的所有内容，我们把应用程序和配置依赖打包好形成一个可交付的运行环境(包括代码、运行时需要的库、环境变量和配置文件等)，这个打包好的运行环境就是image镜像文件。其实作用跟VM里面的ISO文件类似</p><h3 id="_1-unionfs-联合文件系统" tabindex="-1">1 UnionFS（联合文件系统） <a class="header-anchor" href="#_1-unionfs-联合文件系统" aria-label="Permalink to &quot;1 UnionFS（联合文件系统）&quot;">​</a></h3><p>UnionFS（联合文件系统）：Union文件系统（UnionFS）是一种分层、轻量级并且高性能的文件系统，它支持对文件系统的修改作为一次提交来一层层的叠加，同时可以将不同目录挂载到同一个虚拟文件系统下(unite several directories into a single virtual filesystem)。Union 文件系统是 Docker 镜像的基础。镜像可以通过分层来进行继承，基于基础镜像（没有父镜像），可以制作各种具体的应用镜像。</p><p>特性：一次同时加载多个文件系统，但从外面看起来，只能看到一个文件系统，联合加载会把各层文件系统叠加起来，这样最终的文件系统会包含所有底层的文件和目录</p><h3 id="_2-镜像加载过程" tabindex="-1">2 镜像加载过程 <a class="header-anchor" href="#_2-镜像加载过程" aria-label="Permalink to &quot;2 镜像加载过程&quot;">​</a></h3><p>通过观察pull，我们发现在下载docker的镜像过程中，镜像好像是在一层一层的在下载，这是为什么呢？</p><p>镜像分层最大的一个好处就是共享资源，方便复制迁移，就是为了复用。</p><p>比如说有多个镜像都从相同的 base 镜像构建而来，那么 Docker Host 只需在磁盘上保存一份 base 镜像； 同时内存中也只需加载一份 base 镜像，就可以为所有容器服务了。而且镜像的每一层都可以被共享。</p><h3 id="_3-docker镜像加载原理" tabindex="-1">3 Docker镜像加载原理： <a class="header-anchor" href="#_3-docker镜像加载原理" aria-label="Permalink to &quot;3 Docker镜像加载原理：&quot;">​</a></h3><p>docker的镜像实际上由一层一层的文件系统组成，这种层级的文件系统UnionFS。 bootfs(boot file system)主要包含bootloader和kernel, bootloader主要是引导加载kernel, Linux刚启动时会加载bootfs文件系统，在Docker镜像的最底层是引导文件系统bootfs。这一层与我们典型的Linux/Unix系统是一样的，包含boot加载器和内核。当boot加载完成之后整个内核就都在内存中了，此时内存的使用权已由bootfs转交给内核，此时系统也会卸载bootfs。</p><p>rootfs (root file system) ，在bootfs之上。包含的就是典型 Linux 系统中的 /dev, /proc, /bin, /etc 等标准目录和文件。rootfs就是各种不同的操作系统发行版，比如Ubuntu，Centos等等。</p>',12)),l(a,{url:"/k8s/2.png"}),s[1]||(s[1]=i(`<h4 style="color:red;">4 Docker仅容器层可写</h4><p>所有启动的容器，都是再原来的镜像顶部加载一层，这一层通常被称作“容器层”,“容器层”之下的都叫“镜像层”。并且任何写操作都不会影响到镜像层，镜像层不可用写入</p><h3 id="_5-docker-commit" tabindex="-1">5 docker commit <a class="header-anchor" href="#_5-docker-commit" aria-label="Permalink to &quot;5 docker commit&quot;">​</a></h3><p>docker commit提交容器副本使之成为一个新的镜像，格式：</p><p><code>docker commit -m=&quot;提交的描述信息&quot; -a=&quot;作者&quot; 容器ID 要创建的目标镜像名:[标签名]</code></p><p>实验步骤：</p><ol><li><p>创建一个容器：<code>docker run -it alpine sh</code></p></li><li><p>修改容器：</p><div class="language-sh vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">/home</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> # ls</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">/home</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> # touch 1.txt</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">/home</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> # ls</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">1.txt</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">/home</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> #</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div></li><li><p>提交容器：<code>docker commit -m=&quot;提交测试&quot; -a=&quot;moujun&quot; 1894e6a5aaff moujun/alpine:1.0.0</code></p><div class="language-bash vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[root@VM-0-10-centos </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">~</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]# docker ps</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">CONTAINER</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ID</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">   IMAGE</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">     COMMAND</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">   CREATED</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">         STATUS</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">         PORTS</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">     NAMES</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">1894e6a5aaff</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">   alpine</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &quot;sh&quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">      5</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> minutes</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ago</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">   Up</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 5</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> minutes</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">             musing_dirac</span></span>
<span class="line highlighted"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[root@VM-0-10-centos </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">~</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]# docker commit -m</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;提交测试&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> -a</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;moujun&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> 1894e6a5aaff</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> moujun/alpine:1.0.0</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sha256:dc645a41ed81afc56d484f6d7d9a406192ff3176a3bc8e398bb7e4d489084828</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[root@VM-0-10-centos </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">~</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]# docker images</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">REPOSITORY</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">      TAG</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">       IMAGE</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ID</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">       CREATED</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">         SIZE</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">moujun/alpine</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">   1.0.0</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">     dc645a41ed81</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">   4</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> seconds</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ago</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">   5.59MB</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">alpine</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">          latest</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    c059bfaa849c</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">   7</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> weeks</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ago</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">     5.59MB</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[root@VM-0-10-centos </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">~</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]#</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div></li><li><p>使用创建的镜像生产容器查看修改内容</p><div class="language-bash vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[root@VM-0-10-centos </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">~</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]# docker run -it moujun/alpine:1.0.0 sh</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">/</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> # cd /home/</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">/home</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> # ls</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">1.txt</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">/home</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> #</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div></li></ol>`,7))])}const b=n(h,[["render",k]]);export{u as __pageData,b as default};
