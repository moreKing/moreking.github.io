import{_ as i,c as a,ai as n,o as e}from"./chunks/framework.DcWFUpHS.js";const c=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"docker/docker.md","filePath":"docker/docker.md","lastUpdated":1728525201000}'),l={name:"docker/docker.md"};function p(t,s,h,r,k,d){return e(),a("div",null,s[0]||(s[0]=[n(`<h2 id="_1-安装docker" tabindex="-1">1. 安装docker <a class="header-anchor" href="#_1-安装docker" aria-label="Permalink to &quot;1. 安装docker&quot;">​</a></h2><h3 id="_1-1-在线安装" tabindex="-1">1.1 在线安装 <a class="header-anchor" href="#_1-1-在线安装" aria-label="Permalink to &quot;1.1 在线安装&quot;">​</a></h3><p>本示例来自<a href="https://docs.docker.com/engine/install/centos/" target="_blank" rel="noreferrer">docker官网</a>centos的安装方式</p><p><strong>1. 在线安装</strong></p><div class="language-bash vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">yum</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -y</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> yum-utils</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">yum-config-manager</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> \\</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    --add-repo</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> \\</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    https://download.docker.com/linux/centos/docker-ce.repo</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    </span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">yum</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -y</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> docker-ce</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> docker-ce-cli</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> containerd.io</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p><strong>2. 镜像加速（我使用aliyun）</strong></p><p>创建<code>/etc/docker/daemon.json</code>文件并增加内容，重启docker服务</p><div class="language-bash vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">vi</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /etc/docker/daemon.json</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">   # 此地址已被关闭</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  &quot;registry-mirrors&quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;https://docker.mirrors.ustc.edu.cn/&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">systemctl</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> daemon-reload</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">systemctl</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> restart</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> docker</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p><strong>3. 启动docker</strong></p><div class="language-bash vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">systemctl</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> start</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> docker</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p><strong>4. 开机启动</strong></p><div class="language-bash vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">systemctl</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> enable</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> docker</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p><strong>5. 卸载docker</strong></p><div class="language-bash vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">yum</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> remove</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> docker</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> \\</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">           docker-client</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> \\</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">           docker-client-latest</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> \\</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">           docker-common</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> \\</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">           docker-latest</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> \\</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">           docker-latest-logrotate</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> \\</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">           docker-logrotate</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> \\</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">           docker-engine</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><h2 id="_2-基础命令" tabindex="-1">2. 基础命令 <a class="header-anchor" href="#_2-基础命令" aria-label="Permalink to &quot;2. 基础命令&quot;">​</a></h2><h3 id="_2-1-docker服务命令" tabindex="-1">2.1 docker服务命令 <a class="header-anchor" href="#_2-1-docker服务命令" aria-label="Permalink to &quot;2.1 docker服务命令&quot;">​</a></h3><table tabindex="0"><thead><tr><th>命令</th><th>作用</th></tr></thead><tbody><tr><td>systemctl start docker</td><td>启动docker</td></tr><tr><td>systemctl stop docker</td><td>停止docker</td></tr><tr><td>systemctl restart docker</td><td>重启docker</td></tr><tr><td>systemctl status docker</td><td>查看docker状态</td></tr><tr><td>systemctl enable docker</td><td>开机启动</td></tr><tr><td>docker info</td><td>查看docker概要信息</td></tr><tr><td>docker --help</td><td>查看docker总体帮助文档</td></tr><tr><td>docker command --help</td><td>查看docker命令帮助文档</td></tr></tbody></table><h3 id="_2-2-docker镜像命令" tabindex="-1">2.2 docker镜像命令 <a class="header-anchor" href="#_2-2-docker镜像命令" aria-label="Permalink to &quot;2.2 docker镜像命令&quot;">​</a></h3><h4 id="_2-2-1-docker-images" tabindex="-1">2.2.1 docker images <a class="header-anchor" href="#_2-2-1-docker-images" aria-label="Permalink to &quot;2.2.1 docker images&quot;">​</a></h4><p>列出镜像列表</p><div class="language-bash vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> images</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> </span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">REPOSITORY</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">                         TAG</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">           IMAGE</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ID</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">       CREATED</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">        SIZE</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">guacamole/guacd</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">                    latest</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">        ee0b218233ff</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">   9</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> days</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ago</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">     271MB</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">golang</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">                             1.16-alpine</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">   7e352955f83c</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">   5</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> weeks</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ago</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    302MB</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">alpine</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">                             latest</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">        c059bfaa849c</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">   7</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> weeks</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ago</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    5.59MB</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>列出的镜像列说明：</p><ul><li>**REPOSITORY：**表示镜像的仓库源</li><li>**TAG：**镜像的标签,同一仓库源可以有多个 TAG，代表这个仓库源的不同个版本</li><li>**IMAGE ID：**镜像ID</li><li>**CREATED：**镜像创建时间，不是我们pull的时间</li><li>**SIZE：**镜像大小</li></ul><h4 id="_2-2-2-docker-search" tabindex="-1">2.2.2 docker search <a class="header-anchor" href="#_2-2-2-docker-search" aria-label="Permalink to &quot;2.2.2 docker search&quot;">​</a></h4><p>搜索需要的镜像：docker search 镜像名字</p><p>--limit : 只列出N个镜像，默认25个 <code> docker search --limit 5 redis</code></p><h4 id="_2-2-3-docker-pull" tabindex="-1">2.2.3 docker pull <a class="header-anchor" href="#_2-2-3-docker-pull" aria-label="Permalink to &quot;2.2.3 docker pull&quot;">​</a></h4><p>拉取指定镜像：docker pull 镜像名字[:TAG] 没有TAG就是最新版,docker pull 镜像名字:latest</p><h4 id="_2-2-4-docker-rmi" tabindex="-1">2.2.4 docker rmi <a class="header-anchor" href="#_2-2-4-docker-rmi" aria-label="Permalink to &quot;2.2.4 docker rmi&quot;">​</a></h4><p>删除镜像：</p><ul><li>单个：docker rmi -f 镜像ID</li><li>多个：docker rmi -f 镜像名1:TAG 镜像名2:TAG</li><li>全部：docker rmi -f $(docker images -qa)</li></ul><p>删除所有未打 dangling 标签的镜像:<code>docker rmi $(docker images -q -f dangling=true)</code></p><h4 id="_2-2-5-docker-system-df" tabindex="-1">2.2.5 docker system df <a class="header-anchor" href="#_2-2-5-docker-system-df" aria-label="Permalink to &quot;2.2.5 docker system df&quot;">​</a></h4><p>查看镜像/容器/数据卷所占的空间</p><div class="language-bash vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> system</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> df</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">TYPE</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">            TOTAL</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">     ACTIVE</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    SIZE</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">      RECLAIMABLE</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Images</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">          7</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">         4</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">         3.915GB</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">   374.5MB</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (9%)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Containers</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">      4</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">         4</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">         2.392MB</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">   0B</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (0%)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Local</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Volumes</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">   2</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">         1</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">         0B</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">        0B</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Build</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Cache</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">     0</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">         0</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">         0B</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">        0B</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><blockquote><p>有的时间我们会看见有些镜像的名称是none，TAG也是none，这种情况我们一般称之为虚悬镜像，遇到虚悬镜像，一般处理方式是直接删除，一般是我们自己制作镜像的时候发生</p></blockquote><h3 id="_2-3-docker容器命令" tabindex="-1">2.3 docker容器命令 <a class="header-anchor" href="#_2-3-docker容器命令" aria-label="Permalink to &quot;2.3 docker容器命令&quot;">​</a></h3><h4 id="_2-3-1-docker-run" tabindex="-1">2.3.1 docker run <a class="header-anchor" href="#_2-3-1-docker-run" aria-label="Permalink to &quot;2.3.1 docker run&quot;">​</a></h4><p>由于这个命令比较复杂，下面将以具体的步骤进行演示，首先我们要知道<code>docker run</code>运行的流程</p><p>用户执行<code>docker run</code>来启动容器的时候，docker服务端会先检查本地有没有run的镜像，如果有，那么docker直接使用这个镜像</p><p>格式：docker run [OPTIONS] IMAGE [COMMAND] [ARG...]</p><p><strong>OPTIONS说明（常用）</strong>：单词用两个-- 简写用一个-</p><ul><li>--name=&quot;容器新名字&quot; 为容器指定一个名称；</li><li>-d: 后台运行容器并返回容器ID，也即启动守护式容器(后台运行)；</li><li>-i：以交互模式运行容器，通常与 -t 同时使用；</li><li>-t：为容器重新分配一个伪输入终端，通常与 -i 同时使用；也即启动交互式容器(前台有伪终端，等待交互)；</li><li>-P: 随机端口映射，大写P，一般不使用</li><li>-p: 指定端口映射，小写p ，常用</li><li><strong>-v</strong>:挂载容器卷，做数据持久化，默认是读写权限<code>rw</code>，如果只读只需要在结尾加上 <code>:ro</code>即可</li></ul><p>​ <strong>-v /宿主机绝对路径目录:/容器内目录 [:ro]</strong></p><ul><li><p><strong>--volumes-from</strong> 父类：继承其他容器挂载容器卷，父容器即便被删除，子容器的挂载不会有变化</p></li><li><p><strong>--privileged=true</strong>：如果是CentOS7安全模块会比之前系统版本加强，不安全的会先禁止，所以目录挂载的情况被默认为不安全的行为，在SELinux里面挂载目录被禁止掉了额，如果要开启，我们一般使用--privileged=true命令，扩大容器的权限解决挂载目录没有权限的问题，使用该参数，<strong>container内的root拥有真正的root权限</strong>，否则，container内的root只是外部的一个普通用户权限。</p></li></ul><p><strong>COMMAND：</strong></p><p>/bin/bash：放在镜像名后的是命令，这里我们希望有个交互式 Shell，因此用的是 /bin/bash。 要退出终端，直接输入 exit，保留运行容器需要使用ctrl+p+q</p><h4 id="_2-3-2-docker-inspect" tabindex="-1">2.3.2 docker inspect <a class="header-anchor" href="#_2-3-2-docker-inspect" aria-label="Permalink to &quot;2.3.2 docker inspect&quot;">​</a></h4><p>docker inspect 容器ID 查看容器详细信息,查看容器内部细节</p><h4 id="_2-3-3-docker-logs" tabindex="-1">2.3.3 docker logs <a class="header-anchor" href="#_2-3-3-docker-logs" aria-label="Permalink to &quot;2.3.3 docker logs&quot;">​</a></h4><p>查看容器日志：docker logs 容器ID</p><h4 id="_2-3-4-docker-cp" tabindex="-1">2.3.4 docker cp <a class="header-anchor" href="#_2-3-4-docker-cp" aria-label="Permalink to &quot;2.3.4 docker cp&quot;">​</a></h4><p>容器与主机文件拷贝 ：docker cp 容器ID:容器内路径 目的主机路径</p><p>注意有两种情况</p><ol><li>主机上文件拷贝到容器：docker cp 主机文件路径 容器ID:容器内路径</li><li>容器内文件拷贝到主机：docker cp 容器ID:容器内路径 目的主机路径</li></ol><div class="language-bash vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">#将主机上bin文件拷贝到容器</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ls</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">bin</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  pkg</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> cp</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /root/go/bin</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 918822e6486b:/tmp/test</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> </span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 容器</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ls</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">1.txt</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  bin</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><h4 id="_2-3-5-docker-exec" tabindex="-1">2.3.5 docker exec <a class="header-anchor" href="#_2-3-5-docker-exec" aria-label="Permalink to &quot;2.3.5 docker exec&quot;">​</a></h4><p>进入容器命令终端 :docker exec -it 容器ID bashShell</p><div class="language-bash vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># docker exec -it 327dcdc96475 sh</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">/</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> # </span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">/</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> # cd /tmp/test/</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">/tmp/test</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> # ls</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">1.txt</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  bin</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h4 id="_2-3-6-docker-attach" tabindex="-1">2.3.6 docker attach <a class="header-anchor" href="#_2-3-6-docker-attach" aria-label="Permalink to &quot;2.3.6 docker attach&quot;">​</a></h4><p>进入容器启动命令终端 :docker attach 容器ID</p><div class="language-bash vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> attach</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 327</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">              </span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">cd</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /tmp/test/</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ls</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">1.txt</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  bin</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><blockquote><p>attach 直接进入容器启动命令的终端，不会启动新的进程，用exit退出，会导致容器的停止。</p><p>exec 是在容器中打开新的终端，并且启动新的进程，用exit退出，不会导致容器的停止。</p><p>两者使用快捷键：<strong>ctrl+p+q</strong> 退出都不会停止容器</p></blockquote><h4 id="_2-3-7-docker-top" tabindex="-1">2.3.7 docker top <a class="header-anchor" href="#_2-3-7-docker-top" aria-label="Permalink to &quot;2.3.7 docker top&quot;">​</a></h4><p>查看容器内运行的进程 : docker top 容器ID</p><h4 id="_2-3-8-dockre-rm" tabindex="-1">2.3.8 dockre rm <a class="header-anchor" href="#_2-3-8-dockre-rm" aria-label="Permalink to &quot;2.3.8 dockre rm&quot;">​</a></h4><p><strong>语法</strong>: docker rm [OPTIONS] CONTAINER [CONTAINER...]</p><p>OPTIONS说明：</p><table tabindex="0"><thead><tr><th>命令</th><th>作用</th></tr></thead><tbody><tr><td><strong>-f</strong></td><td>通过 SIGKILL 信号强制删除一个运行中的容器。</td></tr><tr><td><strong>-l</strong></td><td>移除容器间的网络连接，而非容器本身。</td></tr><tr><td><strong>-v</strong></td><td>删除与容器关联的卷</td></tr></tbody></table><p>删除所有容器：<code>docker rm -f $(docker ps -a -q)</code></p><p>删除所有未运行的容器: <code>docker container prune</code> / <code>docker rm $(docker ps -a -q)</code></p><p>删除未启动成功：<code>docker rm $(docker ps -qf status=created)</code></p><p>删除退出状态: <code>docker rm $(docker ps -qf status=exited)</code></p><h4 id="_2-3-9-docker-kill" tabindex="-1">2.3.9 docker kill <a class="header-anchor" href="#_2-3-9-docker-kill" aria-label="Permalink to &quot;2.3.9 docker kill&quot;">​</a></h4><p>停止所有运行的容器 : <code>docker kill $(docker ps -a -q)</code></p><h3 id="_2-4-容器的导入导出" tabindex="-1">2.4 容器的导入导出 <a class="header-anchor" href="#_2-4-容器的导入导出" aria-label="Permalink to &quot;2.4 容器的导入导出&quot;">​</a></h3><p><strong>为什么需要导出？</strong></p><p>在某些情况下，我们需要将自己更新的容器导出称为镜像使用，比如在Ubuntu容器安装Java运行环境，我们可以将此初始化好的环境导出称为镜像，以后使用此镜像来创建容器，就自带了java的运行环境，而不用每次创建容器都进行环境的安装，类似虚拟机的模板文件</p><p><strong>为什么需要导入？</strong></p><p>在一个开发型的公司里面，一般研发开发好程序员以后，通过Dockerfile编译称镜像文件，运维需要将镜像文件导入到docker环境中run起来</p><p><strong>应用场景：</strong></p><p>主要用来制作基础镜像，比如从一个ubuntu镜像启动一个容器，然后安装一些软件和进行一些设置后，使用docker export保存为一个基础镜像。然后，把这个镜像分发给其他人使用，比如作为基础的开发环境。</p><h4 id="_2-4-1-容器导出" tabindex="-1">2.4.1 容器导出 <a class="header-anchor" href="#_2-4-1-容器导出" aria-label="Permalink to &quot;2.4.1 容器导出&quot;">​</a></h4><p>docker export 容器ID &gt; 文件名.tar</p><div class="language-bash vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">root@kali:~#</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> export</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 9188</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> myAlpine.tar.gz</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">root@kali:~#</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ls</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">myAlpine.tar.gz</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  thinclient_drives</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h4 id="_2-4-2-容器导入" tabindex="-1">2.4.2 容器导入 <a class="header-anchor" href="#_2-4-2-容器导入" aria-label="Permalink to &quot;2.4.2 容器导入&quot;">​</a></h4><p>cat 文件名.tar | docker import - 镜像用户/镜像名:镜像版本号</p><div class="language-bash vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">root@kali:~#</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> cat</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> myAlpine.tar.gz</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> import</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> -</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> moujun/my-alpine:0.0.1</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sha256:0a79a0402e43234468b0896277bf342c385f73134ac21ecde0e012c946fa0318</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">root@kali:~#</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> images</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                       </span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">REPOSITORY</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">                         TAG</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">           IMAGE</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ID</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">       CREATED</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">         SIZE</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">moujun/my-alpine</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">                   0.0.1</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">         0a79a0402e43</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">   7</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> seconds</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ago</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">   5.59MB</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">alpine</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">                             latest</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">        c059bfaa849c</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">   7</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> weeks</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ago</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">     5.59MB</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ubuntu</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">                             latest</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">        ba6acccedd29</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">   3</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> months</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ago</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    72.8MB</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">root@kali:~#</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p>注意，镜像名称必须要小写，否则报错</p><h3 id="_2-5-镜像推送" tabindex="-1">2.5 镜像推送 <a class="header-anchor" href="#_2-5-镜像推送" aria-label="Permalink to &quot;2.5 镜像推送&quot;">​</a></h3><h4 id="_2-5-1-登录-docker-login" tabindex="-1">2.5.1 登录 docker login <a class="header-anchor" href="#_2-5-1-登录-docker-login" aria-label="Permalink to &quot;2.5.1  登录 docker login&quot;">​</a></h4><h4 id="_2-5-2-修改标签-docker-tag" tabindex="-1">2.5.2 修改标签 docker tag <a class="header-anchor" href="#_2-5-2-修改标签-docker-tag" aria-label="Permalink to &quot;2.5.2  修改标签 docker tag&quot;">​</a></h4><p><code>docker tag moujun:0.0.1 moujunmore/umi:0.0.1</code></p><p><strong>moujun</strong>:0.0.1:为原镜像名称</p><p><strong>moujunmore/umi:0.0.1</strong>：为符合docker hub推送要求的镜像名称</p><h4 id="_2-5-3-docker-push" tabindex="-1">2.5.3 docker push <a class="header-anchor" href="#_2-5-3-docker-push" aria-label="Permalink to &quot;2.5.3 docker push&quot;">​</a></h4><div class="language-sh vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[root@more tmp]# docker push moujunmore/umi:0.0.1</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">The</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> push</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> refers</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> to</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> repository</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [docker.io/moujunmore/umi]</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">c569ef711d3f:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Pushed</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> </span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">46da2b1c58ba:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Pushed</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> </span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">2503893bd420:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Pushed</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> </span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">1686740e8bf1:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Pushed</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> </span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">98b38fd98eb3:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Pushed</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> </span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">0cf3d17b4494:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Pushed</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> </span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">392246cbae6c:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Pushed</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> </span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">f6e6b207d1f6:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Pushed</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> </span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">1d59199e80ce:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Pushed</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> </span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">5b95e425ec84:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Pushed</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> </span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">8d3ac3489996:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Layer</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> already</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> exists</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> </span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">0.0.1:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> digest:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> sha256:af14bfe72476acf8f4504186d04a68682b41cf5fb1a095a7a5aa6ecbf9bd006b</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> size:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2627</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[root@more tmp]# history</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div><h2 id="_3-认识镜像" tabindex="-1">3. 认识镜像 <a class="header-anchor" href="#_3-认识镜像" aria-label="Permalink to &quot;3. 认识镜像&quot;">​</a></h2><p>镜像：是一种轻量级、可执行的独立软件包，它包含运行某个软件所需的所有内容，我们把应用程序和配置依赖打包好形成一个可交付的运行环境(包括代码、运行时需要的库、环境变量和配置文件等)，这个打包好的运行环境就是image镜像文件。其实作用跟VM里面的ISO文件类似</p><h3 id="_3-1-unionfs-联合文件系统" tabindex="-1">3.1 UnionFS（联合文件系统） <a class="header-anchor" href="#_3-1-unionfs-联合文件系统" aria-label="Permalink to &quot;3.1 UnionFS（联合文件系统）&quot;">​</a></h3><p>UnionFS（联合文件系统）：Union文件系统（UnionFS）是一种分层、轻量级并且高性能的文件系统，它支持对文件系统的修改作为一次提交来一层层的叠加，同时可以将不同目录挂载到同一个虚拟文件系统下(unite several directories into a single virtual filesystem)。Union 文件系统是 Docker 镜像的基础。镜像可以通过分层来进行继承，基于基础镜像（没有父镜像），可以制作各种具体的应用镜像。</p><p>特性：一次同时加载多个文件系统，但从外面看起来，只能看到一个文件系统，联合加载会把各层文件系统叠加起来，这样最终的文件系统会包含所有底层的文件和目录</p><h3 id="_3-2-镜像加载过程" tabindex="-1">3.2 镜像加载过程 <a class="header-anchor" href="#_3-2-镜像加载过程" aria-label="Permalink to &quot;3.2 镜像加载过程&quot;">​</a></h3><p>通过观察pull，我们发现在下载docker的镜像过程中，镜像好像是在一层一层的在下载，这是为什么呢？</p><p>镜像分层最大的一个好处就是共享资源，方便复制迁移，就是为了复用。</p><p>比如说有多个镜像都从相同的 base 镜像构建而来，那么 Docker Host 只需在磁盘上保存一份 base 镜像； 同时内存中也只需加载一份 base 镜像，就可以为所有容器服务了。而且镜像的每一层都可以被共享。</p><h3 id="_3-3-docker镜像加载原理" tabindex="-1">3.3 Docker镜像加载原理： <a class="header-anchor" href="#_3-3-docker镜像加载原理" aria-label="Permalink to &quot;3.3 Docker镜像加载原理：&quot;">​</a></h3><p>docker的镜像实际上由一层一层的文件系统组成，这种层级的文件系统UnionFS。 bootfs(boot file system)主要包含bootloader和kernel, bootloader主要是引导加载kernel, Linux刚启动时会加载bootfs文件系统，在Docker镜像的最底层是引导文件系统bootfs。这一层与我们典型的Linux/Unix系统是一样的，包含boot加载器和内核。当boot加载完成之后整个内核就都在内存中了，此时内存的使用权已由bootfs转交给内核，此时系统也会卸载bootfs。</p><p>rootfs (root file system) ，在bootfs之上。包含的就是典型 Linux 系统中的 /dev, /proc, /bin, /etc 等标准目录和文件。rootfs就是各种不同的操作系统发行版，比如Ubuntu，Centos等等。</p><p><img src="https://images2018.cnblogs.com/blog/799055/201803/799055-20180309154723871-127136242.png" alt="镜像分层"></p><h4 style="color:red;">3.4 Docker仅容器层可写</h4><p>所有启动的容器，都是再原来的镜像顶部加载一层，这一层通常被称作“容器层”,“容器层”之下的都叫“镜像层”。并且任何写操作都不会影响到镜像层，镜像层不可用写入</p><h3 id="_3-5-docker-commit" tabindex="-1">3.5 docker commit <a class="header-anchor" href="#_3-5-docker-commit" aria-label="Permalink to &quot;3.5 docker commit&quot;">​</a></h3><p>docker commit提交容器副本使之成为一个新的镜像，格式：</p><p>docker commit -m=&quot;提交的描述信息&quot; -a=&quot;作者&quot; 容器ID 要创建的目标镜像名:[标签名]</p><p>实验步骤：</p><ol><li><p>创建一个容器：<code>docker run -it alpine sh</code></p></li><li><p>修改容器：</p><div class="language-sh vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">/home</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> # ls</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">/home</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> # touch 1.txt</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">/home</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> # ls</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">1.txt</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">/home</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> #</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div></li><li><p>提交容器：docker commit -m=&quot;提交的描述信息&quot; -a=&quot;作者&quot; 容器ID 要创建的目标镜像名:[标签名]</p><div class="language-bash vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[root@VM-0-10-centos </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">~</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]# docker ps</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">CONTAINER</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ID</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">   IMAGE</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">     COMMAND</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">   CREATED</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">         STATUS</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">         PORTS</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">     NAMES</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">1894e6a5aaff</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">   alpine</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &quot;sh&quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">      5</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> minutes</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ago</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">   Up</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 5</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> minutes</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">             musing_dirac</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[root@VM-0-10-centos </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">~</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]# docker commit -m</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;提交测试&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> -a</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;moujun&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> 1894e6a5aaff</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> moujun/alpine:1.0.0</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sha256:dc645a41ed81afc56d484f6d7d9a406192ff3176a3bc8e398bb7e4d489084828</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[root@VM-0-10-centos </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">~</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]# docker images</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">REPOSITORY</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">      TAG</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">       IMAGE</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ID</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">       CREATED</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">         SIZE</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">moujun/alpine</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">   1.0.0</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">     dc645a41ed81</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">   4</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> seconds</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ago</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">   5.59MB</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">alpine</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">          latest</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    c059bfaa849c</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">   7</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> weeks</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ago</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">     5.59MB</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[root@VM-0-10-centos </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">~</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]#</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div></li><li><p>使用创建的镜像生产容器查看修改内容</p><div class="language-bash vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[root@VM-0-10-centos </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">~</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]# docker run -it moujun/alpine:1.0.0 sh</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">/</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> # cd /home/</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">/home</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> # ls</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">1.txt</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">/home</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> #</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div></li></ol><h2 id="_4-dockerfile" tabindex="-1">4. Dockerfile <a class="header-anchor" href="#_4-dockerfile" aria-label="Permalink to &quot;4. Dockerfile&quot;">​</a></h2><p>Dockerfile是用来构建Docker镜像的文本文件，是由一条条构建镜像所需的指令和参数构成的脚本。</p><p>构建命令：<code>docker build .</code></p><p>要在构建上下文中使用文件，<code>Dockerfile</code>指的是在指令中指定的文件，例如<code>COPY</code>指令。要提高构建的性能，请通过将<code>.dockerignore</code>文件添加到上下文目录来排除文件和目录。</p><h3 id="_4-1-dockerfile指令" tabindex="-1">4.1 Dockerfile指令 <a class="header-anchor" href="#_4-1-dockerfile指令" aria-label="Permalink to &quot;4.1 Dockerfile指令&quot;">​</a></h3><p>我们编写Dockerfile时，最重要的是理解其中的指令含义，由于常用指令不多，我们可以分别做说明</p><p>指令不区分大小写。但是，<strong>约定是大写的</strong>，以便更容易地将它们与参数区分开来。</p><h4 id="_4-1-1-from" tabindex="-1">4.1.1 FROM <a class="header-anchor" href="#_4-1-1-from" aria-label="Permalink to &quot;4.1.1 FROM&quot;">​</a></h4><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>FROM [--platform=&lt;platform&gt;] &lt;image&gt;[:&lt;tag&gt;] [AS &lt;name&gt;]</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>该<code>FROM</code>指令初始化一个新的构建阶段并为后续指令设置 基本映像。因此，有效<code>Dockerfile</code>必须以<code>FROM</code>指令开始。</p><h4 id="_4-1-2-run" tabindex="-1">4.1.2 RUN <a class="header-anchor" href="#_4-1-2-run" aria-label="Permalink to &quot;4.1.2 RUN&quot;">​</a></h4><p>RUN 有两种形式：</p><ul><li><code>RUN &lt;command&gt;</code>shell形式，命令在 shell 中运行</li><li><code>RUN [&quot;executable&quot;, &quot;param1&quot;, &quot;param2&quot;]</code>（<em>执行</em>形式）</li></ul><p>该<code>RUN</code>指令将在当前镜像之上的新层中执行任意命令并提交结果。生成的提交镜像将用于<code>Dockerfile</code>的下一步操作.</p><h2 id="_5-dockerfile构建镜像" tabindex="-1">5. Dockerfile构建镜像 <a class="header-anchor" href="#_5-dockerfile构建镜像" aria-label="Permalink to &quot;5. Dockerfile构建镜像&quot;">​</a></h2><h3 id="_5-1-创建一个dockerfile文件" tabindex="-1">5.1 创建一个Dockerfile文件 <a class="header-anchor" href="#_5-1-创建一个dockerfile文件" aria-label="Permalink to &quot;5.1 创建一个Dockerfile文件&quot;">​</a></h3><div class="language-bash vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> build</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  -t</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> app-name:latest</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> .</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>如果dockerfile文件在当前目录下，则不需要指定文件路径，如果不在当前目录下，则需要指定文件路径</p><div class="language-bash vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> build</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -f</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ./docker/Dockerfile</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  -t</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> app-name:latest</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> .</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div>`,136)]))}const F=i(l,[["render",p]]);export{c as __pageData,F as default};
