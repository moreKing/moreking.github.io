import{_ as a,c as i,ai as e,o as n}from"./chunks/framework.DcWFUpHS.js";const c=JSON.parse('{"title":"Dockerfile","description":"","frontmatter":{},"headers":[],"relativePath":"docker/docker/06.md","filePath":"docker/docker/06.md","lastUpdated":1737611111000}'),l={name:"docker/docker/06.md"};function t(p,s,r,h,d,o){return n(),i("div",null,s[0]||(s[0]=[e(`<h1 id="dockerfile" tabindex="-1">Dockerfile <a class="header-anchor" href="#dockerfile" aria-label="Permalink to &quot;Dockerfile&quot;">​</a></h1><p>Dockerfile是用来构建Docker镜像的文本文件，是由一条条构建镜像所需的指令和参数构成的脚本。</p><p>要在构建上下文中使用文件，<code>Dockerfile</code>指的是在指令中指定的文件，例如<code>COPY</code>指令。要提高构建的性能，请通过将<code>.dockerignore</code>文件添加到上下文目录来排除文件和目录。</p><h2 id="_1-dockerfile指令" tabindex="-1">1 Dockerfile指令 <a class="header-anchor" href="#_1-dockerfile指令" aria-label="Permalink to &quot;1 Dockerfile指令&quot;">​</a></h2><p>我们编写Dockerfile时，最重要的是理解其中的指令含义，由于常用指令不多，我们可以分别做说明</p><p>指令不区分大小写。但是，<strong>约定是大写的</strong>，以便更容易地将它们与参数区分开来。</p><h3 id="_1-1-from" tabindex="-1">1.1 FROM <a class="header-anchor" href="#_1-1-from" aria-label="Permalink to &quot;1.1 FROM&quot;">​</a></h3><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>FROM [--platform=&lt;platform&gt;] &lt;image&gt;[:&lt;tag&gt;] [AS &lt;name&gt;]</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>该<code>FROM</code>指令初始化一个新的构建阶段并为后续指令设置 基本映像。因此，有效<code>Dockerfile</code>必须以<code>FROM</code>指令开始。</p><p>多段构建时，请设置各个阶段的名称<code>[AS &lt;name&gt;]</code>以方便后续构建阶段引用。</p><h3 id="_1-2-run" tabindex="-1">1.2 RUN <a class="header-anchor" href="#_1-2-run" aria-label="Permalink to &quot;1.2 RUN&quot;">​</a></h3><p>RUN 在容器中执行命令，有两种形式：</p><ul><li><code>RUN &lt;command&gt;</code>shell形式，命令在 shell 中运行</li><li><code>RUN [&quot;executable&quot;, &quot;param1&quot;, &quot;param2&quot;]</code>（<em>执行</em>形式）</li></ul><p>该<code>RUN</code>指令将在当前镜像之上的新层中执行任意命令并提交结果。生成的提交镜像将用于<code>Dockerfile</code>的下一步操作.</p><h3 id="_1-3-copy" tabindex="-1">1.3 COPY <a class="header-anchor" href="#_1-3-copy" aria-label="Permalink to &quot;1.3 COPY&quot;">​</a></h3><p>COPY 将文件和目录复制到镜像中。有两种形式,对于包含空格的路径，后一种形式是必需的：</p><ul><li><code>COPY [--from==&lt;image|stage|context&gt;] &lt;src&gt;... &lt;dst&gt;</code></li><li><code>COPY [--from==&lt;image|stage|context&gt;] [&quot;&lt;src&gt;&quot;,... &quot;&lt;dst&gt;&quot;]</code></li></ul><p>要从多阶段构建的构建阶段复制，请指定要从中复制的阶段的名称</p><div class="language-Dockerfile vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">Dockerfile</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># syntax=docker/dockerfile:1</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">FROM</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> alpine </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">AS</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> build</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">COPY</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> . .</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">RUN</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> apk add clang</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">RUN</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> clang -o /hello hello.c</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">FROM</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> scratch</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">COPY</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> --from=build /hello /</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><h3 id="_1-4-workdir" tabindex="-1">1.4 WORKDIR <a class="header-anchor" href="#_1-4-workdir" aria-label="Permalink to &quot;1.4 WORKDIR&quot;">​</a></h3><p>设置工作目录，设置后 后续命令等都在此目录执行</p><div class="language-Dockerfile vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">Dockerfile</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">WORKDIR</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> /path/to/workdir</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h3 id="_1-5-expose" tabindex="-1">1.5 EXPOSE <a class="header-anchor" href="#_1-5-expose" aria-label="Permalink to &quot;1.5 EXPOSE&quot;">​</a></h3><p>EXPOSE 指令通知 Docker 容器在运行时监听指定的网络端口。可以指定端口是监听 TCP 还是 UDP，如果未指定协议，则默认为 TCP。</p><div class="language-Dockerfile vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">Dockerfile</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">EXPOSE</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> &lt;port&gt; [&lt;port&gt;/&lt;protocol&gt;...]</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h3 id="_1-6-env" tabindex="-1">1.6 ENV <a class="header-anchor" href="#_1-6-env" aria-label="Permalink to &quot;1.6 ENV&quot;">​</a></h3><p>ENV 设置环境变量，可以在后续指令中使用，如<code>RUN</code>等</p><div class="language-Dockerfile vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">Dockerfile</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">ENV</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> &lt;key&gt;=&lt;value&gt; ...</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h3 id="_1-7-arg" tabindex="-1">1.7 ARG <a class="header-anchor" href="#_1-7-arg" aria-label="Permalink to &quot;1.7 ARG&quot;">​</a></h3><p>ARG 指令定义了一个在构建时传递给构建器的变量。可以在<code>docker build</code>命令行上使用<code>--build-arg &lt;varname&gt;=&lt;value&gt;</code>来传递值。</p><div class="language-Dockerfile vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">Dockerfile</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">ARG</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> &lt;name&gt;[=&lt;default&gt;]</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h3 id="_1-8-volume" tabindex="-1">1.8 VOLUME <a class="header-anchor" href="#_1-8-volume" aria-label="Permalink to &quot;1.8 VOLUME&quot;">​</a></h3><p>VOLUME 指令创建一个挂载点并将其实际路径挂载到容器中。该<code>VOLUME</code>指令支持以下语法：</p><div class="language-Dockerfile vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">Dockerfile</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">VOLUME</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;/data&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">VOLUME</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> /data</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">VOLUME</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> /data /tmp</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h3 id="_1-9-cmd" tabindex="-1">1.9 CMD <a class="header-anchor" href="#_1-9-cmd" aria-label="Permalink to &quot;1.9 CMD&quot;">​</a></h3><p>CMD 指令用于为执行容器提供默认值。这些默认值可以包含可执行文件，也可以省略可执行文件，在这种情况下，您必须指定<code>ENTRYPOINT</code>指令。如果指定了<code>ENTRYPOINT</code>，则<code>CMD</code>提供默认参数。</p><div class="language-Dockerfile vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">Dockerfile</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">CMD</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;executable&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;param1&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;param2&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">CMD</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;param1&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;param2&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">CMD</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> command param1 param2</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h3 id="_1-10-entrypoint" tabindex="-1">1.10 ENTRYPOINT <a class="header-anchor" href="#_1-10-entrypoint" aria-label="Permalink to &quot;1.10 ENTRYPOINT&quot;">​</a></h3><p>ENTRYPOINT 指令设置容器启动时要运行的命令及其参数。这些参数始终会被传递给镜像中指定的命令，即使您在<code>docker run</code>命令行上指定了其他参数，这些参数也可以被覆盖。</p><div class="language-Dockerfile vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">Dockerfile</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">ENTRYPOINT</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;executable&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;param1&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;param2&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">ENTRYPOINT</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> command param1 param2</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h2 id="_2-cmd和entrypoint的差异" tabindex="-1">2 CMD和ENTRYPOINT的差异 <a class="header-anchor" href="#_2-cmd和entrypoint的差异" aria-label="Permalink to &quot;2 CMD和ENTRYPOINT的差异&quot;">​</a></h2><p>CMD和ENTRYPOINT都是用来指定容器启动时要运行的命令的，但它们之间有一些重要的区别。</p><h3 id="_2-1-cmd" tabindex="-1">2.1 CMD <a class="header-anchor" href="#_2-1-cmd" aria-label="Permalink to &quot;2.1 CMD&quot;">​</a></h3><p>CMD指定的命令在容器启动时会被执行，但它可以被在docker run命令中指定的命令覆盖</p><p>CMD可以是一个命令字符串，也可以是一个命令数组。如果是字符串，会被解释为Shell命令。如果是数组，不会被解释为Shell命令</p><p><strong>场景：</strong></p><ul><li>定义容器的默认行为，当用户未指定特定命令时。</li><li>在Dockerfile中设置默认参数，以适应多种使用情况。</li></ul><h3 id="_2-2-entrypoint" tabindex="-1">2.2 ENTRYPOINT <a class="header-anchor" href="#_2-2-entrypoint" aria-label="Permalink to &quot;2.2 ENTRYPOINT&quot;">​</a></h3><p>ENTRYPOINT指定的命令始终会被执行，即使在运行容器时指定了其他命令。 ENTRYPOINT只能是一个命令数组，它不会被解释为Shell命令。</p><p><strong>场景：</strong></p><ul><li>定义容器的主要入口点，始终执行该命令。</li><li>创建可重用的Docker映像，以便用户可以在ENTRYPOINT命令上提供自定义参数。</li></ul><h2 id="_5-构建镜像" tabindex="-1">5. 构建镜像 <a class="header-anchor" href="#_5-构建镜像" aria-label="Permalink to &quot;5. 构建镜像&quot;">​</a></h2><p>构建镜像的命令格式为：</p><div class="language-bash vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> build</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  -t</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> app-name:latest</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> .</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>如果dockerfile文件在当前目录下，则不需要指定文件路径，如果不在当前目录下，则需要指定文件路径</p><div class="language-bash vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> build</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -f</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ./docker/Dockerfile</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  -t</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> app-name:latest</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> .</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div>`,56)]))}const u=a(l,[["render",t]]);export{c as __pageData,u as default};
